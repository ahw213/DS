#202102022 철학과 안혜원

class Node:
    def __init__(self, data):
        self.data = data
        self.next = None

class LinkedList:
    def __init__(self):
        dummy = Node("dummy")
        self.head = dummy
        self.tail = dummy
        self.current = None
        self.before = None
        self.num_of_data = 0

    def append(self, data):
        new_node = Node(data)
        self.tail.next = new_node
        self.tail = new_node
        self.num_of_data += 1

    def delete(self):
        pop_data = self.current.data
        if self.current is self.tail:
            self.tail = self.before
        self.before.next = self.current.next
        self.current = self.before
        self.num_of_data -= 1
        return pop_data

    def first(self):
        if self.num_of_data == 0:
            return None
        self.before = self.head
        self.current = self.head.next
        return self.current.data

    def next(self):
        if self.current.next is None:
            return None
        self.before = self.current
        self.current = self.current.next
        return self.current.data

    def size(self):
        return self.num_of_data

    def traverse_all(self):
        if self.num_of_data == 0:
            return None
        temp = self.head.next
        res = f"head -> ({temp.data})"
        while temp.next is not None:
            temp = temp.next
            res += f" -> ({temp.data})"
        res += " -> null"
        print(res)

    def insert_at(self, position, new_data):
        if position <= 0:
            print("Error: Position should be greater than 0")
            return
        elif position > self.num_of_data:
            self.append(new_data)
        else:
            new_node = Node(new_data)
            temp = self.head
            for i in range(position-1):
                temp = temp.next
            new_node.next = temp.next
            temp.next = new_node
            self.num_of_data += 1

    def remove(self, key):
        temp = self.head
        count = 0
        while temp is not None:
            if temp.next is not None and temp.next.data == key:
                temp.next = temp.next.next
                self.num_of_data -= 1
                count += 1
            else:
                temp = temp.next
        if count == 0:
            return False
        else:
            return True